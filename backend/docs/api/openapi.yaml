openapi: 3.0.3
info:
  title: Game Server Promotion Platform API
  description: |
    A comprehensive API for managing game server promotions, user management, and reward systems.
    
    ## Features
    - JWT-based authentication with role-based access control
    - Five-level permission system (Super Admin, Admin, Server Owner, Reviewer, User)
    - Server management and approval workflow
    - User management with comprehensive role and permission system
    - Rate limiting and security features
    
    ## Authentication
    This API uses JWT (JSON Web Tokens) for authentication. Include the token in the Authorization header:
    ```
    Authorization: Bearer <your-jwt-token>
    ```
    
    ## Rate Limiting
    API requests are rate-limited based on user authentication status and endpoint type:
    - Authentication endpoints: 5 requests per 15 minutes
    - General API endpoints: 1000 requests per hour
    - Anonymous requests: 100 requests per hour
    
  version: 1.0.0
  contact:
    name: API Support
    email: support@example.com
  license:
    name: MIT
    url: https://opensource.org/licenses/MIT

servers:
  - url: http://localhost:8080/api
    description: Development server
  - url: https://api.promotion-platform.com/api
    description: Production server

security:
  - BearerAuth: []

paths:
  # Authentication Endpoints
  /auth/register:
    post:
      tags:
        - Authentication
      summary: Register new user
      description: Create a new user account with default user role
      security: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RegisterRequest'
      responses:
        '201':
          description: User registered successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthResponse'
        '400':
          $ref: '#/components/responses/ValidationError'
        '500':
          $ref: '#/components/responses/ServerError'

  /auth/login:
    post:
      tags:
        - Authentication
      summary: User login
      description: Authenticate user and return JWT tokens
      security: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoginRequest'
      responses:
        '200':
          description: Login successful
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthResponse'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '423':
          description: Account locked due to failed attempts
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /auth/refresh:
    post:
      tags:
        - Authentication
      summary: Refresh JWT token
      description: Get new access token using refresh token
      security: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RefreshRequest'
      responses:
        '200':
          description: Token refreshed successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TokenResponse'
        '401':
          $ref: '#/components/responses/Unauthorized'

  /auth/logout:
    post:
      tags:
        - Authentication
      summary: User logout
      description: Revoke current JWT token
      responses:
        '200':
          description: Logout successful
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessResponse'

  /auth/profile:
    get:
      tags:
        - Authentication
      summary: Get user profile
      description: Retrieve current user's profile information
      responses:
        '200':
          description: Profile retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserProfileResponse'
        '401':
          $ref: '#/components/responses/Unauthorized'
    put:
      tags:
        - Authentication
      summary: Update user profile
      description: Update current user's profile information
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateProfileRequest'
      responses:
        '200':
          description: Profile updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserProfileResponse'
        '400':
          $ref: '#/components/responses/ValidationError'
        '401':
          $ref: '#/components/responses/Unauthorized'

  /auth/change-password:
    post:
      tags:
        - Authentication
      summary: Change password
      description: Change current user's password
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ChangePasswordRequest'
      responses:
        '200':
          description: Password changed successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessResponse'
        '400':
          $ref: '#/components/responses/ValidationError'
        '401':
          $ref: '#/components/responses/Unauthorized'

  # User Management Endpoints
  /users:
    get:
      tags:
        - User Management
      summary: Get users list
      description: Retrieve paginated list of users with filtering options (Admin only)
      parameters:
        - $ref: '#/components/parameters/Page'
        - $ref: '#/components/parameters/PerPage'
        - name: status
          in: query
          schema:
            type: string
            enum: [active, inactive, suspended, pending]
        - name: role
          in: query
          schema:
            type: string
        - name: search
          in: query
          schema:
            type: string
      responses:
        '200':
          description: Users retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsersListResponse'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
    post:
      tags:
        - User Management
      summary: Create new user
      description: Create a new user account (Admin only)
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateUserRequest'
      responses:
        '201':
          description: User created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserResponse'
        '400':
          $ref: '#/components/responses/ValidationError'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'

  /users/{id}:
    get:
      tags:
        - User Management
      summary: Get user by ID
      description: Retrieve specific user information (Admin only)
      parameters:
        - $ref: '#/components/parameters/UserId'
      responses:
        '200':
          description: User retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserResponse'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
    put:
      tags:
        - User Management
      summary: Update user
      description: Update user information (Admin only)
      parameters:
        - $ref: '#/components/parameters/UserId'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateUserRequest'
      responses:
        '200':
          description: User updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserResponse'
        '400':
          $ref: '#/components/responses/ValidationError'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
    delete:
      tags:
        - User Management
      summary: Delete user
      description: Soft delete user account (Admin only)
      parameters:
        - $ref: '#/components/parameters/UserId'
      responses:
        '200':
          description: User deleted successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessResponse'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'

  # Server Management Endpoints
  /servers:
    get:
      tags:
        - Server Management
      summary: Get servers list
      description: Retrieve paginated list of servers with filtering options
      parameters:
        - $ref: '#/components/parameters/Page'
        - $ref: '#/components/parameters/PerPage'
        - name: status
          in: query
          schema:
            type: string
            enum: [pending, approved, rejected, suspended, inactive]
        - name: game_type
          in: query
          schema:
            type: string
        - name: owner_id
          in: query
          schema:
            type: integer
        - name: search
          in: query
          schema:
            type: string
        - name: is_featured
          in: query
          schema:
            type: boolean
        - name: ping_status
          in: query
          schema:
            type: string
            enum: [online, offline, unknown]
      responses:
        '200':
          description: Servers retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServersListResponse'
        '401':
          $ref: '#/components/responses/Unauthorized'
    post:
      tags:
        - Server Management
      summary: Create new server
      description: Register a new game server
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateServerRequest'
      responses:
        '201':
          description: Server created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServerResponse'
        '400':
          $ref: '#/components/responses/ValidationError'
        '401':
          $ref: '#/components/responses/Unauthorized'

  /servers/{id}:
    get:
      tags:
        - Server Management
      summary: Get server by ID
      description: Retrieve specific server information
      parameters:
        - $ref: '#/components/parameters/ServerId'
      responses:
        '200':
          description: Server retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServerResponse'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'

  # System Endpoints
  /health:
    get:
      tags:
        - System
      summary: System health check
      description: Check system health status including database, cache, and file system
      responses:
        '200':
          description: Health check completed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HealthResponse'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'

  /stats:
    get:
      tags:
        - System
      summary: System statistics
      description: Get comprehensive system statistics and metrics
      responses:
        '200':
          description: Statistics retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StatsResponse'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'

components:
  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

  parameters:
    Page:
      name: page
      in: query
      description: Page number for pagination
      schema:
        type: integer
        minimum: 1
        default: 1
    PerPage:
      name: per_page
      in: query
      description: Number of items per page
      schema:
        type: integer
        minimum: 1
        maximum: 100
        default: 20
    UserId:
      name: id
      in: path
      description: User ID
      required: true
      schema:
        type: integer
        minimum: 1
    ServerId:
      name: id
      in: path
      description: Server ID
      required: true
      schema:
        type: integer
        minimum: 1

  schemas:
    # Request Schemas
    RegisterRequest:
      type: object
      required:
        - username
        - email
        - password
        - password_confirm
      properties:
        username:
          type: string
          minLength: 3
          maxLength: 50
          pattern: '^[a-zA-Z0-9_-]+$'
        email:
          type: string
          format: email
          maxLength: 100
        password:
          type: string
          minLength: 8
          maxLength: 255
        password_confirm:
          type: string
        first_name:
          type: string
          maxLength: 50
        last_name:
          type: string
          maxLength: 50
        phone:
          type: string
          maxLength: 20
        line_id:
          type: string
          maxLength: 50
        discord_id:
          type: string
          maxLength: 50

    LoginRequest:
      type: object
      required:
        - login
        - password
      properties:
        login:
          type: string
          description: Username or email
          minLength: 3
          maxLength: 100
        password:
          type: string
          minLength: 1
          maxLength: 255

    RefreshRequest:
      type: object
      required:
        - refresh_token
      properties:
        refresh_token:
          type: string

    UpdateProfileRequest:
      type: object
      properties:
        first_name:
          type: string
          maxLength: 50
        last_name:
          type: string
          maxLength: 50
        phone:
          type: string
          maxLength: 20
        line_id:
          type: string
          maxLength: 50
        discord_id:
          type: string
          maxLength: 50
        avatar:
          type: string
          maxLength: 255
        preferences:
          type: object

    ChangePasswordRequest:
      type: object
      required:
        - current_password
        - new_password
        - new_password_confirm
      properties:
        current_password:
          type: string
        new_password:
          type: string
          minLength: 8
          maxLength: 255
        new_password_confirm:
          type: string

    CreateUserRequest:
      type: object
      required:
        - username
        - email
        - password
      properties:
        username:
          type: string
          minLength: 3
          maxLength: 50
        email:
          type: string
          format: email
          maxLength: 100
        password:
          type: string
          minLength: 8
          maxLength: 255
        first_name:
          type: string
          maxLength: 50
        last_name:
          type: string
          maxLength: 50
        phone:
          type: string
          maxLength: 20
        line_id:
          type: string
          maxLength: 50
        discord_id:
          type: string
          maxLength: 50
        status:
          type: string
          enum: [active, inactive, suspended, pending]
        roles:
          type: array
          items:
            type: integer

    UpdateUserRequest:
      type: object
      properties:
        username:
          type: string
          minLength: 3
          maxLength: 50
        email:
          type: string
          format: email
          maxLength: 100
        first_name:
          type: string
          maxLength: 50
        last_name:
          type: string
          maxLength: 50
        phone:
          type: string
          maxLength: 20
        line_id:
          type: string
          maxLength: 50
        discord_id:
          type: string
          maxLength: 50
        status:
          type: string
          enum: [active, inactive, suspended, pending]

    CreateServerRequest:
      type: object
      required:
        - server_name
        - game_type
      properties:
        server_name:
          type: string
          minLength: 3
          maxLength: 100
        game_type:
          type: string
          maxLength: 50
        version:
          type: string
          maxLength: 50
        description:
          type: string
          maxLength: 1000
        website_url:
          type: string
          format: uri
          maxLength: 255
        discord_url:
          type: string
          format: uri
          maxLength: 255
        server_ip:
          type: string
          maxLength: 100
        server_port:
          type: integer
          minimum: 1
          maximum: 65535
        max_players:
          type: integer
          minimum: 1
        tags:
          type: array
          items:
            type: string
        features:
          type: array
          items:
            type: string
        social_links:
          type: object

    # Response Schemas
    SuccessResponse:
      type: object
      properties:
        status:
          type: string
          example: success
        message:
          type: string

    ErrorResponse:
      type: object
      properties:
        status:
          type: string
          example: error
        message:
          type: string
        code:
          type: integer
        timestamp:
          type: string
          format: date-time

    ValidationErrorResponse:
      type: object
      properties:
        status:
          type: string
          example: error
        message:
          type: string
          example: Validation failed
        errors:
          type: object
        timestamp:
          type: string
          format: date-time

    AuthResponse:
      type: object
      properties:
        status:
          type: string
          example: success
        message:
          type: string
        data:
          type: object
          properties:
            user:
              $ref: '#/components/schemas/User'
            tokens:
              $ref: '#/components/schemas/TokenData'

    TokenResponse:
      type: object
      properties:
        status:
          type: string
          example: success
        message:
          type: string
        data:
          type: object
          properties:
            tokens:
              $ref: '#/components/schemas/TokenData'

    UserProfileResponse:
      type: object
      properties:
        status:
          type: string
          example: success
        message:
          type: string
        data:
          type: object
          properties:
            user:
              $ref: '#/components/schemas/User'

    UserResponse:
      type: object
      properties:
        status:
          type: string
          example: success
        message:
          type: string
        data:
          type: object
          properties:
            user:
              $ref: '#/components/schemas/User'

    UsersListResponse:
      type: object
      properties:
        status:
          type: string
          example: success
        message:
          type: string
        data:
          type: object
          properties:
            users:
              type: array
              items:
                $ref: '#/components/schemas/User'
            total:
              type: integer
            page:
              type: integer
            per_page:
              type: integer
            total_pages:
              type: integer

    ServerResponse:
      type: object
      properties:
        status:
          type: string
          example: success
        message:
          type: string
        data:
          type: object
          properties:
            server:
              $ref: '#/components/schemas/Server'

    ServersListResponse:
      type: object
      properties:
        status:
          type: string
          example: success
        message:
          type: string
        data:
          type: object
          properties:
            servers:
              type: array
              items:
                $ref: '#/components/schemas/Server'
            total:
              type: integer
            page:
              type: integer
            per_page:
              type: integer
            total_pages:
              type: integer

    HealthResponse:
      type: object
      properties:
        status:
          type: string
          example: success
        message:
          type: string
        data:
          $ref: '#/components/schemas/HealthData'

    StatsResponse:
      type: object
      properties:
        status:
          type: string
          example: success
        message:
          type: string
        data:
          $ref: '#/components/schemas/StatsData'

    # Data Models
    User:
      type: object
      properties:
        id:
          type: integer
        username:
          type: string
        email:
          type: string
        first_name:
          type: string
        last_name:
          type: string
        avatar:
          type: string
        phone:
          type: string
        line_id:
          type: string
        discord_id:
          type: string
        status:
          type: string
          enum: [active, inactive, suspended, pending]
        email_verified_at:
          type: string
          format: date-time
        last_login_at:
          type: string
          format: date-time
        last_login_ip:
          type: string
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time
        roles:
          type: array
          items:
            $ref: '#/components/schemas/Role'
        permissions:
          type: array
          items:
            type: string

    Role:
      type: object
      properties:
        id:
          type: integer
        name:
          type: string
        display_name:
          type: string
        description:
          type: string
        level:
          type: integer
        assigned_at:
          type: string
          format: date-time
        expires_at:
          type: string
          format: date-time

    Server:
      type: object
      properties:
        id:
          type: integer
        owner_id:
          type: integer
        server_code:
          type: string
        server_name:
          type: string
        game_type:
          type: string
        version:
          type: string
        description:
          type: string
        website_url:
          type: string
        discord_url:
          type: string
        server_ip:
          type: string
        server_port:
          type: integer
        logo_image:
          type: string
        background_image:
          type: string
        banner_images:
          type: array
          items:
            type: string
        max_players:
          type: integer
        online_players:
          type: integer
        status:
          type: string
          enum: [pending, approved, rejected, suspended, inactive]
        approval_date:
          type: string
          format: date-time
        approved_by:
          type: integer
        rejection_reason:
          type: string
        tags:
          type: array
          items:
            type: string
        features:
          type: array
          items:
            type: string
        social_links:
          type: object
        is_featured:
          type: boolean
        featured_until:
          type: string
          format: date-time
        last_ping_at:
          type: string
          format: date-time
        ping_status:
          type: string
          enum: [online, offline, unknown]
        sort_order:
          type: integer
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time

    TokenData:
      type: object
      properties:
        access_token:
          type: string
        refresh_token:
          type: string
        token_type:
          type: string
          example: Bearer
        expires_in:
          type: integer
        expires_at:
          type: integer

    HealthData:
      type: object
      properties:
        status:
          type: string
          enum: [healthy, degraded, unhealthy]
        timestamp:
          type: string
          format: date-time
        version:
          type: string
        environment:
          type: string
        checks:
          type: object
          properties:
            database:
              $ref: '#/components/schemas/HealthCheck'
            cache:
              $ref: '#/components/schemas/HealthCheck'
            filesystem:
              $ref: '#/components/schemas/HealthCheck'
            memory:
              $ref: '#/components/schemas/MemoryCheck'

    HealthCheck:
      type: object
      properties:
        status:
          type: string
          enum: [healthy, unhealthy, warning]
        message:
          type: string

    MemoryCheck:
      type: object
      properties:
        status:
          type: string
          enum: [healthy, unhealthy, warning]
        usage:
          type: string
        limit:
          type: string
        percentage:
          type: number

    StatsData:
      type: object
      properties:
        timestamp:
          type: string
          format: date-time
        uptime:
          type: string
        database:
          type: object
        users:
          type: object
        servers:
          type: object
        sessions:
          type: object
        system:
          type: object

  responses:
    Unauthorized:
      description: Authentication required or token invalid
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'

    Forbidden:
      description: Insufficient permissions
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'

    NotFound:
      description: Resource not found
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'

    ValidationError:
      description: Validation failed
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ValidationErrorResponse'

    ServerError:
      description: Internal server error
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'

tags:
  - name: Authentication
    description: User authentication and profile management
  - name: User Management
    description: User management operations (Admin only)
  - name: Server Management
    description: Game server registration and management
  - name: System
    description: System health and statistics